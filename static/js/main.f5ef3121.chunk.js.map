{"version":3,"sources":["component/GridWrapper.jsx","component/GraphSelector.jsx","component/ButtonGroup.jsx","component/SceneLegend.jsx","component/Scene.jsx","component/FlatGraphPlot.jsx","component/StructureSimilarityHeatMap.jsx","component/ClassificationBar.jsx","component/Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["GridWrapper","that","this","newChildren","React","Children","map","props","children","child","cloneElement","width","style","height","Component","GraphSelector","options","onChange","className","id","name","key","value","ButtonGroup","onClickLeftBtn","onClickMiddleBtn","onClickRightBtn","role","type","onClick","viewBox","fill","xmlns","d","oneDecimalFormat","format","linearScale","scaleLinear","domain","range","SceneLegend","events","LegendBox","title","scale","labelFormat","i","labels","label","LegendItem","alert","JSON","stringify","margin","r","legendGlyphSize","cx","cy","LegendLabel","align","text","Scene","handleWindowResize","window","innerWidth","mount","clientHeight","camera","aspect","updateProjectionMatrix","renderer","setSize","render","scene","controls","handleResize","init","make_scene","document","addEventListener","onDocumentMouseMove","Keyboard","animate","frameId","requestAnimationFrame","selectedGraphKey","selectedGraph","currentGraphKey","remove_scene","currentGraph","update","hover_color_update","camera2","position","copy","sub","target","setLength","CAM_DISTANCE","lookAt","scene2","render_scene","make_sphere","sphere_name","sphere_position","sphereGeometry","THREE","sphereMaterial","color","original_sphere_color","transparent","sphere","castShadow","userData","targetList","push","make_group","group_name","group_position","group","sphere_data","length","toString","concat","str1","forEach","ele","add","make_graph","graph_group","group_data","str2","make_transition","transition_name","group1_name","group2_name","sphere1_name","sphere2_name","Math","floor","threshold","g","b","position1","getObjectByName","clone","position2","distance","distanceTo","cylinderGeometry","cylinderMaterial","shininess","opacity","applyMatrix4","makeTranslation","makeRotationX","degToRad","cylinder","visible","make_output_transition","output_sphere","node_num","tokens","transition_data","attention_weights","original_color","material","output_transition_data","output_sphere_position","output_transition","transition_output_group","transition","trans_group","j","k","str3","graph_group_num","trans_group_num","remove","console","log","transition_output_num","event","mouse","x","clientX","clientWidth","y","clientY","error","raycaster","setFromCamera","group_num","sphere_num","intersects","intersectObjects","object","INTERSECTED","setHex","currentHex","spritey_name_list","pop","spritey","todoList","todoObject","startsWith","substring","makeTextSprite","fontsize","fontface","borderColor","a","temp_position","parent","trans","str4","parseInt","test_num","num","getHex","keyCode","moveCameraToOriginal","moveCameraLeft","moveCameraRight","lookat_point","z","message","parameters","undefined","hasOwnProperty","borderThickness","backgroundColor","textColor","canvas","createElement","context","getContext","font","textWidth","measureText","fillStyle","strokeStyle","lineWidth","roundRect","fillText","texture","needsUpdate","spriteMaterial","sprite","set","ctx","w","h","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","stroke","start","stop","cancelAnimationFrame","renderer2","camera_position","rotation","camera_rotation","reset","handleLeftBtn","handleMiddleBtn","handleRightBtn","color_pick","SCREEN_WIDTH","SCREEN_HEIGHT","antialias","aplpha","setPixelRatio","devicePixelRatio","setClearColor","appendChild","domElement","ASPECT","axes2","up","CANVAS_WIDTH","CANVAS_HEIGHT","alpha","axesHelper","Object","TrackballControls","minDistance","maxDistance","setAttribute","removeChild","removeEventListener","Fragment","ref","green","barColor","keys","scaleBand","padding","scaleOrdinal","AutoWidthGridLayout","WidthProvider","GridLayout","Grid","fullWidth","smallGridWidth","state","layout","static","minW","maxW","minH","maxH","graphKeys","onChangeGraphSelector","cols","rowHeight","compactType","verticalCompact","App","currentTarget","setState","Graphs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f5ef3121.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass GridWrapper extends Component {\n    render() {\n        var that = this;\n        var newChildren = React.Children.map(this.props.children, function (child) {\n            return React.cloneElement(child, {\n                width: that.props.style.width,\n                height: that.props.style.height,\n            });\n        });\n        return <div {...this.props}>{newChildren}</div>;\n    }\n}\n\nexport default GridWrapper;\n","import \"../css/GraphSelector.css\";\n\nconst GraphSelector = ({ options, onChange }) => {\n    return (\n        <div className=\"selector-box\">\n            <div className=\"title\">Sentence</div>\n            <select\n                className=\"custom-select\"\n                id=\"groupSelect\"\n                name=\"groupSelect\"\n                onChange={onChange}\n            >\n                {options.map((key) => (\n                    <option key={key} value={key}>\n                        {key}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default GraphSelector;\n","import React from \"react\";\nimport \"../css/ButtonGroup.css\";\n\nconst ButtonGroup = ({ onClickLeftBtn, onClickMiddleBtn, onClickRightBtn }) => {\n    return (\n        <div className=\"btn-group btn-group-lg\" role=\"group\" id=\"button-group\">\n            <button type=\"button\" className=\"view-btn btn\" onClick={onClickLeftBtn}>\n                <svg\n                    width=\"1.5em\"\n                    height=\"1.5em\"\n                    viewBox=\"0 0 16 16\"\n                    className=\"bi bi-caret-left-fill\"\n                    fill=\"white\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path d=\"M3.86 8.753l5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z\" />\n                </svg>\n            </button>\n            <button type=\"button\" className=\"view-btn btn\" onClick={onClickMiddleBtn}>\n                <svg\n                    width=\"1.5em\"\n                    height=\"1.5em\"\n                    viewBox=\"0 0 16 16\"\n                    className=\"bi bi-align-center\"\n                    fill=\"white\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path d=\"M8 1a.5.5 0 0 1 .5.5V6h-1V1.5A.5.5 0 0 1 8 1zm0 14a.5.5 0 0 1-.5-.5V10h1v4.5a.5.5 0 0 1-.5.5zM2 7a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7z\" />\n                </svg>\n            </button>\n            <button type=\"button\" className=\"view-btn btn\" onClick={onClickRightBtn}>\n                <svg\n                    width=\"1.5em\"\n                    height=\"1.5em\"\n                    viewBox=\"0 0 16 16\"\n                    className=\"bi bi-caret-right-fill\"\n                    fill=\"white\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <path d=\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\" />\n                </svg>\n            </button>\n        </div>\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { format } from \"d3-format\";\nimport { scaleLinear } from \"@vx/scale\";\nimport { LegendLinear, LegendItem, LegendLabel } from \"@vx/legend\";\nimport \"../css/Legend.css\";\n\nconst oneDecimalFormat = format(\".1f\");\nconst legendGlyphSize = 15;\nconst linearScale = scaleLinear({\n    domain: [0, 1.0],\n    range: [\"#FF7D00\", \"#FF0000\"],\n});\n\nexport default function SceneLegend({ events = false }) {\n    return (\n        <div className=\"legend-position\">\n            <LegendBox title=\"Attention\">\n                <LegendLinear\n                    scale={linearScale}\n                    labelFormat={(d, i) => (i % 2 === 0 ? oneDecimalFormat(d) : \"\")}\n                >\n                    {(labels) =>\n                        labels.map((label, i) => (\n                            <LegendItem\n                                key={`legend-quantile-${i}`}\n                                onClick={() => {\n                                    if (events) alert(`clicked: ${JSON.stringify(label)}`);\n                                }}\n                            >\n                                <svg\n                                    width={legendGlyphSize}\n                                    height={legendGlyphSize}\n                                    style={{ margin: \"2px 0\" }}\n                                >\n                                    <circle\n                                        fill={label.value}\n                                        r={legendGlyphSize / 2}\n                                        cx={legendGlyphSize / 2}\n                                        cy={legendGlyphSize / 2}\n                                    />\n                                </svg>\n                                <LegendLabel align=\"left\" margin=\"0 4px\">\n                                    {label.text}\n                                </LegendLabel>\n                            </LegendItem>\n                        ))\n                    }\n                </LegendLinear>\n            </LegendBox>\n        </div>\n    );\n}\n\nfunction LegendBox({ title, children }) {\n    return (\n        <div className=\"legend-box\">\n            <div className=\"title\">{title}</div>\n            {children}\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport TrackballControls from \"three-trackballcontrols\";\r\n\r\nimport GraphSelector from \"./GraphSelector\";\r\nimport ButtonGroup from \"./ButtonGroup\";\r\nimport SceneLegend from \"./SceneLegend\";\r\nimport \"../css/Scene.css\";\r\n\r\nclass Scene extends Component {\r\n    componentDidMount() {\r\n        const { selectedGraphKey, selectedGraph } = this.props;\r\n        this.currentGraphKey = selectedGraphKey;\r\n        this.currentGraph = selectedGraph;\r\n        this.color_pick = [\"rgb(0,0,254)\", \"rgb(0,204,0)\", \"rgb(102,0,204)\"];\r\n        this.original_sphere_color = \"rgb(200,200,200)\";\r\n        this.original_color = new THREE.Color();\r\n        //transition visible var\r\n        this.threshold = 0.05;\r\n\r\n        //name var\r\n        this.str1 = \"node\";\r\n        this.str2 = \"group\";\r\n        this.str3 = \"tran\";\r\n        this.str4 = \"spritey\";\r\n\r\n        const SCREEN_WIDTH = window.innerWidth - 20; // Seems that this.mount.clientWidth won't update immediately\r\n        const SCREEN_HEIGHT = this.mount.clientHeight; // Grid Height\r\n\r\n        this.scene = new THREE.Scene();\r\n\r\n        //Add Renderer\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, aplpha: false });\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\r\n        this.renderer.setClearColor(0x000000, 1);\r\n        // this.renderer.gammaInput = true;\r\n        // this.renderer.gammaOutput = true;\r\n        this.mount.appendChild(this.renderer.domElement);\r\n\r\n        //this.camera var\r\n        var VIEW_ANGLE = 45;\r\n        var ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT;\r\n        var NEAR = 0.1;\r\n        var FAR = 20000;\r\n        this.lookat_point = new THREE.Vector3();\r\n\r\n        //basic var\r\n        this.camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n        this.scene.add(this.camera);\r\n        this.camera.position.set(0, 150, 1200);\r\n        this.camera.lookAt(this.scene.position);\r\n        this.lookat_point = this.scene.position;\r\n        this.camera_position = this.camera.position.clone();\r\n        this.camera_rotation = this.camera.rotation.clone();\r\n\r\n        //group var\r\n        this.trans_group = new THREE.Group();\r\n        this.graph_group = new THREE.Group();\r\n\r\n        //ray casting var\r\n        this.INTERSECTED = null;\r\n        this.spritey = null;\r\n        this.spritey_name_list = [];\r\n        this.targetList = [];\r\n        this.todoList = [];\r\n        this.raycaster = new THREE.Raycaster(); // create once\r\n        this.mouse = new THREE.Vector2(); // create once\r\n        this.trans = new THREE.Vector3(0, 10, 20);\r\n\r\n        //for this.scene2 var\r\n        this.scene2 = new THREE.Scene();\r\n        this.axes2 = new THREE.AxesHelper(300);\r\n        this.scene2.add(this.axes2);\r\n        this.camera2 = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n        this.camera2.up = this.camera.up; // important!;\r\n        this.CANVAS_WIDTH = SCREEN_WIDTH * 0.2;\r\n        this.CANVAS_HEIGHT = SCREEN_HEIGHT * 0.2;\r\n\r\n        this.CAM_DISTANCE = 1000;\r\n        this.renderer2 = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.renderer2.setClearColor(0x000000, 0);\r\n        this.renderer2.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer2.setSize(this.CANVAS_WIDTH, this.CANVAS_HEIGHT);\r\n        this.axesHelper.appendChild(this.renderer2.domElement);\r\n\r\n        //data var: sphere_data, group_data, transition_data\r\n        this.sphere_data = [];\r\n        this.transition_data = [];\r\n\r\n        this.group_data = [\r\n            new THREE.Vector3(0, 450, 0),\r\n            new THREE.Vector3(0, 150, 0),\r\n            new THREE.Vector3(0, -150, 0),\r\n        ];\r\n\r\n        this.output_transition_data = [];\r\n        this.output_sphere = Object();\r\n        this.transition_output_group = new THREE.Group();\r\n\r\n        this.controls = new TrackballControls(this.camera, this.renderer.domElement);\r\n        this.controls.minDistance = 100.1;\r\n        this.controls.maxDistance = 10000.5;\r\n\r\n        this.init();\r\n        this.animate();\r\n\r\n        window.addEventListener(\"resize\", this.handleWindowResize);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.mount.setAttribute(\"clientWidth\", window.innerWidth - 20);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n        this.mount.removeChild(this.renderer.domElement);\r\n\r\n        window.removeEventListener(\"resize\", this.handleWindowResize);\r\n    }\r\n\r\n    handleWindowResize = () => {\r\n        // from https://stackoverflow.com/questions/29884485/threejs-canvas-size-based-on-container\r\n        const width = window.innerWidth - 20;\r\n        const height = this.mount.clientHeight;\r\n        // console.log(window.innerWidth, this.props.width, this.mount.clientWidth);\r\n\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize(width, height);\r\n        this.renderer.render(this.scene, this.camera);\r\n        this.controls.handleResize();\r\n    };\r\n\r\n    init = () => {\r\n        this.make_scene();\r\n        document.addEventListener(\"mousemove\", this.onDocumentMouseMove, false);\r\n        document.addEventListener(\"keydown\", this.Keyboard, false);\r\n        // var sphere_position = new THREE.Vector3(100, 50, -50);\r\n        // var sphere = make_sphere(0x8888ff,\"sphere1\",sphere_position);\r\n        // this.scene.add(sphere);\r\n        // var group = make_group((0,0,0));\r\n        // this.scene.add(group);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        const { selectedGraphKey, selectedGraph } = this.props;\r\n        if (this.currentGraphKey !== selectedGraphKey) {\r\n            this.remove_scene();\r\n            this.currentGraphKey = selectedGraphKey;\r\n            this.currentGraph = selectedGraph;\r\n            this.make_scene();\r\n        }\r\n\r\n        this.controls.update();\r\n        this.hover_color_update();\r\n        this.camera2.position.copy(this.camera.position);\r\n        this.camera2.position.sub(this.controls.target); // added by @libe\r\n        this.camera2.position.setLength(this.CAM_DISTANCE);\r\n        this.camera2.lookAt(this.scene2.position);\r\n        this.render_scene();\r\n    };\r\n\r\n    make_sphere = (sphere_name, sphere_position, text) => {\r\n        var sphereGeometry = new THREE.SphereGeometry(12, 32, 16);\r\n        var sphereMaterial = new THREE.MeshBasicMaterial({ color: this.original_sphere_color });\r\n        sphereMaterial.transparent = true;\r\n        var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        sphere.name = sphere_name;\r\n        sphere.position.copy(sphere_position);\r\n        sphere.castShadow = true;\r\n        sphere.userData = text;\r\n        this.targetList.push(sphere);\r\n        return sphere;\r\n    };\r\n\r\n    make_group = (group_name, group_position) => {\r\n        var group = new THREE.Group();\r\n\r\n        var sphere = [];\r\n\r\n        for (let i = 0; i < this.sphere_data.length; i++) {\r\n            sphere.push([\r\n                i.toString().concat(this.str1),\r\n                this.sphere_data[i][0],\r\n                this.sphere_data[i][1],\r\n            ]);\r\n        }\r\n\r\n        sphere.forEach((ele) => group.add(this.make_sphere(ele[0], ele[1],ele[2])));\r\n\r\n\r\n        group.position.copy(group_position);\r\n        group.name = group_name;\r\n        // console.log(group);\r\n        // console.log(group.children[0]);\r\n        return group;\r\n    };\r\n\r\n    make_graph = () => {\r\n        var group = [];\r\n        this.graph_group.name = \"graph_group\";\r\n        for (let i = 0; i < this.group_data.length; i++) {\r\n            group.push([i.toString().concat(this.str2), this.group_data[i]]);\r\n        }\r\n\r\n        group.map((ele) => this.graph_group.add(this.make_group(ele[0], ele[1])));\r\n        // console.log(graph_group);\r\n        this.scene.add(this.graph_group);\r\n    };\r\n\r\n    make_transition = (\r\n        transition_name,\r\n        group1_name,\r\n        group2_name,\r\n        sphere1_name,\r\n        sphere2_name,\r\n        value\r\n    ) => {\r\n        if (value > 1.0) value = 1.0;\r\n        //color\r\n        var ar = 255,\r\n            ag = 128,\r\n            ab = 0,\r\n            br = 255,\r\n            bg = 0,\r\n            bb = 0;\r\n\r\n        var r = Math.floor(((br - ar) * (value - this.threshold)) / (1 - this.threshold) + ar);\r\n        var g = Math.floor(((bg - ag) * (value - this.threshold)) / (1 - this.threshold) + ag);\r\n        var b = Math.floor(((bb - ab) * (value - this.threshold)) / (1 - this.threshold) + ab);\r\n\r\n        var color1 = \"rgb(\";\r\n        var append1 = \",\";\r\n        var append2 = \")\";\r\n        var color = color1.concat(\r\n            r.toString(),\r\n            append1,\r\n            g.toString(),\r\n            append1,\r\n            b.toString(),\r\n            append2\r\n        );\r\n        var position1 = this.scene\r\n            .getObjectByName(group1_name)\r\n            .getObjectByName(sphere1_name)\r\n            .position.clone();\r\n        var position2 = this.scene\r\n            .getObjectByName(group2_name)\r\n            .getObjectByName(sphere2_name)\r\n            .position.clone();\r\n        position1.add(this.scene.getObjectByName(group1_name).position);\r\n        position2.add(this.scene.getObjectByName(group2_name).position);\r\n        var distance = position1.distanceTo(position2);\r\n        var cylinderGeometry = new THREE.CylinderGeometry(2, 2, distance, 32);\r\n        var cylinderMaterial = new THREE.MeshBasicMaterial({\r\n            color: color,\r\n        });\r\n        cylinderMaterial.shininess = 50;\r\n        cylinderMaterial.transparent = true;\r\n        cylinderMaterial.opacity = 0.5;\r\n\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, distance / 2, 0));\r\n        // rotate it the right way for lookAt to work\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeRotationX(THREE.Math.degToRad(90)));\r\n        // Make a mesh with the geometry\r\n        var cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);\r\n        // Position it where we want\r\n        cylinder.position.copy(position1);\r\n        // And make it point to where we want\r\n        cylinder.lookAt(position2);\r\n\r\n        // cylinder.position.copy(center);\r\n        cylinder.castShadow = true;\r\n        cylinder.name = transition_name;\r\n        cylinder.visible = false;\r\n        // console.log(cylinder);\r\n        // targetList.push(cylinder);\r\n\r\n        return cylinder;\r\n    };\r\n\r\n    make_output_transition = (transition_name, group_name, sphere_name, value) => {\r\n        if (value > 1.0) value = 1.0;\r\n        //color\r\n        var ar = 255,\r\n            ag = 128,\r\n            ab = 0,\r\n            br = 255,\r\n            bg = 0,\r\n            bb = 0;\r\n\r\n        var r = Math.floor(((br - ar) * (value - this.threshold)) / (1 - this.threshold) + ar);\r\n        var g = Math.floor(((bg - ag) * (value - this.threshold)) / (1 - this.threshold) + ag);\r\n        var b = Math.floor(((bb - ab) * (value - this.threshold)) / (1 - this.threshold) + ab);\r\n\r\n        var color1 = \"rgb(\";\r\n        var append1 = \",\";\r\n        var append2 = \")\";\r\n        var color = color1.concat(\r\n            r.toString(),\r\n            append1,\r\n            g.toString(),\r\n            append1,\r\n            b.toString(),\r\n            append2\r\n        );\r\n        var position1 = this.scene\r\n            .getObjectByName(group_name)\r\n            .getObjectByName(sphere_name)\r\n            .position.clone();\r\n        var position2 = this.output_sphere.position.clone();\r\n        position1.add(this.scene.getObjectByName(group_name).position);\r\n\r\n        var distance = position1.distanceTo(position2);\r\n        var cylinderGeometry = new THREE.CylinderGeometry(2, 2, distance, 32);\r\n        var cylinderMaterial = new THREE.MeshBasicMaterial({\r\n            color: color,\r\n        });\r\n        cylinderMaterial.shininess = 50;\r\n        cylinderMaterial.transparent = true;\r\n\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, distance / 2, 0));\r\n        // rotate it the right way for lookAt to work\r\n        cylinderGeometry.applyMatrix4(new THREE.Matrix4().makeRotationX(THREE.Math.degToRad(90)));\r\n        // Make a mesh with the geometry\r\n        var cylinder = new THREE.Mesh(cylinderGeometry, cylinderMaterial);\r\n        // Position it where we want\r\n        cylinder.position.copy(position1);\r\n        // And make it point to where we want\r\n        cylinder.lookAt(position2);\r\n\r\n        // cylinder.position.copy(center);\r\n        cylinder.castShadow = true;\r\n        cylinder.name = transition_name;\r\n        cylinder.visible = false;\r\n\r\n        return cylinder;\r\n    };\r\n\r\n    make_scene = () => {\r\n        var node_num = this.currentGraph.tokens.length;\r\n        var node_group_num = 30;\r\n        var node_distance = 50;\r\n        var node_start = (node_group_num-1) * node_distance / 2.0 * (-1);\r\n        for (let i = 0; i < node_num; i++) {\r\n            this.sphere_data.push([\r\n                new THREE.Vector3(\r\n                    (node_start+(i%node_group_num) * node_distance),\r\n                    Math.floor(i/node_group_num)*(-1) * node_distance,\r\n                    0\r\n                ),\r\n                this.currentGraph.tokens[i],\r\n            ]);\r\n        }\r\n        for(let i=0;i<2;i++)\r\n        {\r\n            this.transition_data.push(this.currentGraph.attention_weights[i][0]);\r\n        }\r\n\r\n        this.make_graph();\r\n        this.original_color = this.graph_group.children[0].children[0].material.color.clone();\r\n        for(let i=0;i<node_num;i++)\r\n        {\r\n            this.output_transition_data.push(this.currentGraph.attention_weights[2][5][i][0]);\r\n        }\r\n\r\n        var output_sphere_position = new THREE.Vector3(0, -450, 0);\r\n        var sphereGeometry = new THREE.SphereGeometry(24, 32, 16);\r\n        var sphereMaterial = new THREE.MeshBasicMaterial({ color: \"rgb(0,255,0)\" });\r\n        sphereMaterial.transparent = true;\r\n        this.output_sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n        this.output_sphere.name = \"output_sphere\";\r\n        this.output_sphere.position.copy(output_sphere_position);\r\n        this.scene.add(this.output_sphere);\r\n        this.targetList.push(this.output_sphere);\r\n\r\n        var output_group_num =  2;\r\n        for (let i = 0; i < this.sphere_data.length; i++) {\r\n            if (this.output_transition_data[i] > this.threshold) {\r\n                var output_transition = this.make_output_transition(\r\n                    i.toString().concat(\"output_transition\"),\r\n                    output_group_num.toString().concat(this.str2),\r\n                    i.toString().concat(this.str1),\r\n                    this.output_transition_data[i]\r\n                );\r\n                this.transition_output_group.add(output_transition);\r\n            }\r\n        }\r\n        this.scene.add(this.transition_output_group);\r\n\r\n        var transition = [];\r\n        this.trans_group.name = \"this.trans_group\";\r\n        for (let i = 0; i < this.group_data.length - 1; i++) {\r\n            for (let j = 0; j < this.sphere_data.length; j++) {\r\n                for (let k = 0; k < this.sphere_data.length; k++) {\r\n                    transition.push([\r\n                        (\r\n                            i * this.sphere_data.length * this.sphere_data.length +\r\n                            j * this.sphere_data.length +\r\n                            k\r\n                        )\r\n                            .toString()\r\n                            .concat(this.str3),\r\n                        i.toString().concat(this.str2),\r\n                        (i + 1).toString().concat(this.str2),\r\n                        j.toString().concat(this.str1),\r\n                        k.toString().concat(this.str1),\r\n                        this.transition_data[i][j][k],\r\n                    ]);\r\n                }\r\n            }\r\n        }\r\n\r\n        transition.forEach((ele) => {\r\n            if (ele[5] > this.threshold) {\r\n                this.trans_group.add(\r\n                    this.make_transition(ele[0], ele[1], ele[2], ele[3], ele[4], ele[5])\r\n                );\r\n            }\r\n        });\r\n\r\n        this.scene.add(this.trans_group);\r\n    };\r\n\r\n    remove_scene = () => {\r\n        var graph_group_num = this.graph_group.children[0].children.length;\r\n        var trans_group_num = this.trans_group.children.length;\r\n        for (let i = 0; i < this.group_data.length; i++) {\r\n            for (let j = 0; j < graph_group_num; j++) {\r\n                this.graph_group.children[0].remove(this.graph_group.children[0].children[0]);\r\n                console.log(\"finished sphere\");\r\n            }\r\n            this.graph_group.remove(this.graph_group.children[0]);\r\n            console.log(\"finished\");\r\n        }\r\n        this.scene.remove(this.graph_group);\r\n        for (let i = 0; i < trans_group_num; i++) {\r\n            this.trans_group.remove(this.trans_group.children[0]);\r\n        }\r\n        this.scene.remove(this.trans_group);\r\n        var transition_output_num = this.transition_output_group.children.length;\r\n        for (let i = 0; i < transition_output_num; i++) {\r\n            this.transition_output_group.remove(this.transition_output_group.children[0]);\r\n        }\r\n        this.scene.remove(this.transition_output_group);\r\n        this.output_transition_data = [];\r\n        this.sphere_data = [];\r\n        this.transition_data = [];\r\n        this.targetList = [];\r\n    };\r\n\r\n    //mouse action\r\n    onDocumentMouseMove = (event) => {\r\n        // the following line would stop any other event handler from firing\r\n        // (such as the mouse's TrackballControls)\r\n        // event.preventDefault();\r\n        // const width = window.innerWidth - 20;\r\n        // const height = this.mount.clientHeight;\r\n        // update the mouse variable\r\n        // const offset_y = window.innerHeight - this.mount.clientHeight;\r\n        try {\r\n            this.mouse.x = ((event.clientX - 10) / this.mount.clientWidth) * 2 - 1;\r\n            this.mouse.y = -((event.clientY - 10) / this.mount.clientHeight) * 2 + 1;\r\n        } catch (error) {}\r\n    };\r\n\r\n    hover_color_update = () => {\r\n        // find intersections\r\n\r\n        // create a Ray with origin at the mouse position\r\n        //   and direction into the this.scene (this.camera direction)\r\n        // raycaster = new THREE.Raycaster();\r\n\r\n        // create an array containing all objects in the this.scene with which the ray intersects\r\n        this.raycaster.setFromCamera(this.mouse, this.camera);\r\n        var intersects = this.raycaster.intersectObjects(this.targetList);\r\n        // INTERSECTED = the object in the this.scene currently closest to the this.camera\r\n        //\t\tand intersected by the Ray projected from the mouse position\r\n\r\n        // if there is one (or more) intersections\r\n        var group_num, sphere_num;\r\n        if (intersects.length > 0) {\r\n            // if the closest object intersected is not the currently stored intersection object\r\n            if (intersects[0].object !== this.INTERSECTED) {\r\n                // restore previous intersection object (if it exists) to its original color\r\n                if (this.INTERSECTED) {\r\n                    // if(INTERSECTED.geometry.type===\"SphereGeometry\")\r\n                    // {\r\n                    //reset\r\n                    this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\r\n                    for (let i = 0; i < this.group_data.length; i++) {\r\n                        for (let j = 0; j < this.graph_group.children[i].children.length; j++) {\r\n                            this.graph_group.children[i].children[j].material.opacity = 1.0;\r\n                            this.graph_group.children[i].children[j].material.color = this.original_color.clone();\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < this.trans_group.children.length; i++) {\r\n                        this.trans_group.children[i].visible = false;\r\n                    }\r\n                    for (let i = 0; i < this.transition_output_group.children.length; i++) {\r\n                        this.transition_output_group.children[i].visible = false;\r\n                    }\r\n                    while (this.spritey_name_list.length !== 0) {\r\n                        this.scene.remove(\r\n                            this.scene.getObjectByName(\r\n                                this.spritey_name_list[this.spritey_name_list.length - 1]\r\n                            )\r\n                        );\r\n                        this.spritey_name_list.pop();\r\n                    }\r\n                    this.spritey = null;\r\n                }\r\n                // store reference to closest object as current intersection object\r\n\r\n                this.INTERSECTED = intersects[0].object;\r\n                if (this.INTERSECTED !== this.output_sphere) {\r\n                    //set everything to low opacity state\r\n                    for (let i = 0; i < this.group_data.length; i++) {\r\n                        for (let j = 0; j < this.graph_group.children[i].children.length; j++) {\r\n                            this.graph_group.children[i].children[j].material.opacity = 0.33;\r\n                        }\r\n                    }\r\n\r\n                    //get object that want to be stand out (transition and origin)\r\n                    this.todoList.push(this.INTERSECTED);\r\n                    // console.log(INTERSECTED);\r\n                    while (this.todoList.length !== 0) {\r\n                        var todoObject = this.todoList[this.todoList.length - 1];\r\n                        this.todoList.pop();\r\n                        if(todoObject.userData.startsWith(\"##\"))\r\n                        {\r\n                            todoObject.userData = todoObject.userData.substring(2)\r\n                        }\r\n                        this.spritey = this.makeTextSprite(todoObject.userData, {\r\n                            fontsize: 100,\r\n                            fontface: \"Georgia\",\r\n                            borderColor: { r: 0, g: 0, b: 255, a: 1.0 },\r\n                        });\r\n                        var temp_position = todoObject.position.clone();\r\n                        temp_position.add(todoObject.parent.position);\r\n                        this.spritey.position.copy(temp_position);\r\n                        this.spritey.position.add(this.trans);\r\n                        this.spritey.name = todoObject.name.concat(this.str4);\r\n                        this.spritey_name_list.push(this.spritey.name);\r\n                        // console.log(spritey);\r\n                        this.scene.add(this.spritey);\r\n\r\n                        todoObject.material.opacity = 1.0;\r\n                        sphere_num = parseInt(todoObject.name);\r\n                        group_num = parseInt(todoObject.parent.name);\r\n                        // console.log(sphere_num,group_num);\r\n                        if (group_num !== 0) {\r\n                            for (let i = 0; i < this.trans_group.children.length; i++) {\r\n                                var test_num =\r\n                                    parseInt(this.trans_group.children[i].name) -\r\n                                    (group_num - 1) *\r\n                                        this.sphere_data.length *\r\n                                        this.sphere_data.length;\r\n                                if (\r\n                                    test_num % this.sphere_data.length === sphere_num &&\r\n                                    test_num < this.sphere_data.length * this.sphere_data.length &&\r\n                                    test_num > 0\r\n                                ) {\r\n                                    // console.log(test_num);\r\n                                    // this.trans_group.children[i].material.opacity = 1.0;\r\n                                    this.trans_group.children[i].visible = true;\r\n                                    var num = Math.floor(test_num / this.sphere_data.length);\r\n                                    // console.log(graph_group.children[(group_num-1)].children[num]);\r\n                                    this.todoList.push(\r\n                                        this.graph_group.children[group_num - 1].children[num]\r\n                                    );\r\n                                    this.graph_group.children[group_num - 1].children[num].material.color = this.trans_group.children[i].material.color.clone();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < this.group_data.length; i++) {\r\n                        for (let j = 0; j < this.graph_group.children[i].children.length; j++) {\r\n                            this.graph_group.children[i].children[j].material.opacity = 0.33;\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < this.transition_output_group.children.length; i++) {\r\n                        this.transition_output_group.children[i].visible = true;\r\n                        var sphere = this.graph_group.children[2].children[\r\n                            parseInt(this.transition_output_group.children[i].name)\r\n                        ];\r\n                        sphere.material.opacity = 1.0;\r\n                        sphere.material.color = this.transition_output_group.children[i].material.color.clone();\r\n                        this.todoList.push(sphere);\r\n                    }\r\n                    while (this.todoList.length !== 0) {\r\n                        var todoObject = this.todoList[this.todoList.length - 1];\r\n                        this.todoList.pop();\r\n                        if(todoObject.userData.startsWith(\"##\"))\r\n                        {\r\n                            todoObject.userData = todoObject.userData.substring(2)\r\n                        }\r\n                        this.spritey = this.makeTextSprite(todoObject.userData, {\r\n                            fontsize: 100,\r\n                            fontface: \"Georgia\",\r\n                            borderColor: { r: 0, g: 0, b: 255, a: 1.0 },\r\n                        });\r\n                        var temp_position = todoObject.position.clone();\r\n                        temp_position.add(todoObject.parent.position);\r\n                        this.spritey.position.copy(temp_position);\r\n                        this.spritey.position.add(this.trans);\r\n                        this.spritey.name = todoObject.name.concat(this.str4);\r\n                        this.spritey_name_list.push(this.spritey.name);\r\n                        // console.log(spritey);\r\n                        this.scene.add(this.spritey);\r\n\r\n                        todoObject.material.opacity = 1.0;\r\n                        sphere_num = parseInt(todoObject.name);\r\n                        group_num = parseInt(todoObject.parent.name);\r\n                        // console.log(sphere_num,group_num);\r\n                        if (group_num !== 0) {\r\n                            for (let i = 0; i < this.trans_group.children.length; i++) {\r\n                                var test_num =\r\n                                    parseInt(this.trans_group.children[i].name) -\r\n                                    (group_num - 1) *\r\n                                        this.sphere_data.length *\r\n                                        this.sphere_data.length;\r\n                                if (\r\n                                    test_num % this.sphere_data.length === sphere_num &&\r\n                                    test_num < this.sphere_data.length * this.sphere_data.length &&\r\n                                    test_num > 0\r\n                                ) {\r\n                                    // console.log(test_num);\r\n                                    // this.trans_group.children[i].material.opacity = 1.0;\r\n                                    this.trans_group.children[i].visible = true;\r\n                                    var num = Math.floor(test_num / this.sphere_data.length);\r\n                                    // console.log(graph_group.children[(group_num-1)].children[num]);\r\n                                    this.todoList.push(\r\n                                        this.graph_group.children[group_num - 1].children[num]\r\n                                    );\r\n                                    this.graph_group.children[group_num - 1].children[num].material.color = this.trans_group.children[i].material.color.clone();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //set itself to a highlight color\r\n                // store color of closest object (for later restoration)\r\n                this.INTERSECTED.currentHex = this.INTERSECTED.material.color.getHex();\r\n                // set a new color for closest object\r\n                this.INTERSECTED.material.color.setHex(0xfc4ad9);\r\n            }\r\n        } // there are no intersections\r\n        else {\r\n            // restore previous intersection object (if it exists) to its original color\r\n            if (this.INTERSECTED) {\r\n                // if(INTERSECTED.geometry.type===\"SphereGeometry\")\r\n                // {\r\n                //reset\r\n                this.INTERSECTED.material.color.setHex(this.INTERSECTED.currentHex);\r\n                for (let i = 0; i < this.group_data.length; i++) {\r\n                    for (let j = 0; j < this.graph_group.children[i].children.length; j++) {\r\n                        this.graph_group.children[i].children[j].material.opacity = 1.0;\r\n                        this.graph_group.children[i].children[j].material.color = this.original_color.clone();\r\n                    }\r\n                }\r\n                for (let i = 0; i < this.trans_group.children.length; i++) {\r\n                    this.trans_group.children[i].visible = false;\r\n                }\r\n                for (let i = 0; i < this.transition_output_group.children.length; i++) {\r\n                    this.transition_output_group.children[i].visible = false;\r\n                }\r\n                while (this.spritey_name_list.length !== 0) {\r\n                    this.scene.remove(\r\n                        this.scene.getObjectByName(\r\n                            this.spritey_name_list[this.spritey_name_list.length - 1]\r\n                        )\r\n                    );\r\n                    this.spritey_name_list.pop();\r\n                }\r\n                this.spritey = null;\r\n            }\r\n            // remove previous intersection object reference\r\n            //     by setting current intersection object to \"nothing\"\r\n            this.INTERSECTED = null;\r\n        }\r\n    };\r\n\r\n    Keyboard = (event) => {\r\n        if (event.keyCode === 72) {\r\n            this.moveCameraToOriginal();\r\n        }\r\n        //A x-left\r\n        if (event.keyCode === 65) {\r\n            this.moveCameraLeft();\r\n        }\r\n        //D x-right\r\n        if (event.keyCode === 68) {\r\n            this.moveCameraRight();\r\n        }\r\n        //W y-up\r\n        if (event.keyCode === 87) {\r\n            this.camera.position.y = this.camera.position.y + 100;\r\n            this.lookat_point.y = this.lookat_point.y - 100;\r\n            this.camera.lookAt(this.lookat_point);\r\n        }\r\n        //S y-down\r\n        if (event.keyCode === 83) {\r\n            this.camera.position.y = this.camera.position.y - 100;\r\n            this.lookat_point.y = this.lookat_point.y + 100;\r\n            this.camera.lookAt(this.lookat_point);\r\n        }\r\n        //N -come near\r\n        if (event.keyCode === 78) {\r\n            this.camera.position.z = this.camera.position.z + 100;\r\n            this.lookat_point.z = this.lookat_point.z - 100;\r\n            this.camera.lookAt(this.lookat_point);\r\n        }\r\n        //M -go far\r\n        if (event.keyCode === 77) {\r\n            this.camera.position.z = this.camera.position.z - 100;\r\n            this.lookat_point.z = this.lookat_point.z + 100;\r\n            this.camera.lookAt(this.lookat_point);\r\n        }\r\n    };\r\n\r\n    makeTextSprite = (message, parameters) => {\r\n        if (parameters === undefined) parameters = {};\r\n        var fontface = parameters.hasOwnProperty(\"fontface\") ? parameters[\"fontface\"] : \"Arial\";\r\n        var fontsize = parameters.hasOwnProperty(\"fontsize\") ? parameters[\"fontsize\"] : 18;\r\n        var borderThickness = parameters.hasOwnProperty(\"borderThickness\")\r\n            ? parameters[\"borderThickness\"]\r\n            : 4;\r\n        var borderColor = parameters.hasOwnProperty(\"borderColor\")\r\n            ? parameters[\"borderColor\"]\r\n            : { r: 0, g: 0, b: 0, a: 1.0 };\r\n        var backgroundColor = parameters.hasOwnProperty(\"backgroundColor\")\r\n            ? parameters[\"backgroundColor\"]\r\n            : { r: 255, g: 255, b: 255, a: 1.0 };\r\n        var textColor = parameters.hasOwnProperty(\"textColor\")\r\n            ? parameters[\"textColor\"]\r\n            : { r: 0, g: 0, b: 0, a: 1.0 };\r\n\r\n        var canvas = document.createElement(\"canvas\");\r\n        var context = canvas.getContext(\"2d\");\r\n        context.font = \"Bold \" + fontsize + \"px \" + fontface;\r\n        var metrics = context.measureText(message);\r\n        var textWidth = metrics.width;\r\n\r\n        context.fillStyle =\r\n            \"rgba(\" +\r\n            backgroundColor.r +\r\n            \",\" +\r\n            backgroundColor.g +\r\n            \",\" +\r\n            backgroundColor.b +\r\n            \",\" +\r\n            backgroundColor.a +\r\n            \")\";\r\n        context.strokeStyle =\r\n            \"rgba(\" +\r\n            borderColor.r +\r\n            \",\" +\r\n            borderColor.g +\r\n            \",\" +\r\n            borderColor.b +\r\n            \",\" +\r\n            borderColor.a +\r\n            \")\";\r\n\r\n        context.lineWidth = borderThickness;\r\n        this.roundRect(\r\n            context,\r\n            borderThickness / 2,\r\n            borderThickness / 2,\r\n            (textWidth + borderThickness) * 1.1,\r\n            fontsize * 1.4 + borderThickness,\r\n            8\r\n        );\r\n\r\n        context.fillStyle =\r\n            \"rgba(\" + textColor.r + \", \" + textColor.g + \", \" + textColor.b + \", 1.0)\";\r\n        context.fillText(message, borderThickness, fontsize + borderThickness);\r\n\r\n        var texture = new THREE.Texture(canvas);\r\n        texture.needsUpdate = true;\r\n\r\n        var spriteMaterial = new THREE.SpriteMaterial({\r\n            map: texture,\r\n            // useScreenCoordinates: false,\r\n        });\r\n        var sprite = new THREE.Sprite(spriteMaterial);\r\n        sprite.scale.set(0.5 * fontsize, 0.25 * fontsize, 0.75 * fontsize);\r\n        return sprite;\r\n    };\r\n\r\n    roundRect = (ctx, x, y, w, h, r) => {\r\n        ctx.beginPath();\r\n        ctx.moveTo(x + r, y);\r\n        ctx.lineTo(x + w - r, y);\r\n        ctx.quadraticCurveTo(x + w, y, x + w, y + r);\r\n        ctx.lineTo(x + w, y + h - r);\r\n        ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\r\n        ctx.lineTo(x + r, y + h);\r\n        ctx.quadraticCurveTo(x, y + h, x, y + h - r);\r\n        ctx.lineTo(x, y + r);\r\n        ctx.quadraticCurveTo(x, y, x + r, y);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.stroke();\r\n    };\r\n\r\n    start = () => {\r\n        if (!this.frameId) {\r\n            this.frameId = requestAnimationFrame(this.animate);\r\n        }\r\n    };\r\n\r\n    stop = () => {\r\n        cancelAnimationFrame(this.frameId);\r\n    };\r\n\r\n    render_scene = () => {\r\n        if (this.renderer) this.renderer.render(this.scene, this.camera);\r\n        if (this.renderer2) this.renderer2.render(this.scene2, this.camera2);\r\n    };\r\n\r\n    moveCameraToOriginal = () => {\r\n        this.camera.position.set(this.camera_position);\r\n        this.camera.rotation.set(this.camera_rotation);\r\n        this.lookat_point.x = 0;\r\n        this.lookat_point.y = 0;\r\n        this.lookat_point.z = 0;\r\n        this.camera.lookAt(this.lookat_point);\r\n        this.controls.reset();\r\n    };\r\n\r\n    moveCameraLeft = () => {\r\n        this.camera.position.x = this.camera.position.x - 100;\r\n        this.lookat_point.x = this.lookat_point.x + 100;\r\n        this.camera.lookAt(this.lookat_point);\r\n    };\r\n\r\n    moveCameraRight = () => {\r\n        this.camera.position.x = this.camera.position.x + 100;\r\n        this.lookat_point.x = this.lookat_point.x - 100;\r\n        this.camera.lookAt(this.lookat_point);\r\n    };\r\n\r\n    handleLeftBtn = () => {\r\n        this.moveCameraLeft();\r\n    };\r\n\r\n    handleMiddleBtn = () => {\r\n        this.moveCameraToOriginal();\r\n    };\r\n\r\n    handleRightBtn = () => {\r\n        this.moveCameraRight();\r\n    };\r\n\r\n    render() {\r\n        const { width, height, options, onChange } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <div\r\n                    style={{ width: width, height: height }}\r\n                    ref={(ref) => {\r\n                        this.mount = ref;\r\n                    }}\r\n                >\r\n                    <GraphSelector options={options} onChange={onChange} />\r\n                    <SceneLegend />\r\n                    <ButtonGroup\r\n                        width={width}\r\n                        onClickLeftBtn={this.handleLeftBtn}\r\n                        onClickMiddleBtn={this.handleMiddleBtn}\r\n                        onClickRightBtn={this.handleRightBtn}\r\n                    />\r\n                    <div\r\n                        className=\"axes-helper\"\r\n                        ref={(ref) => {\r\n                            this.axesHelper = ref;\r\n                        }}\r\n                    />\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scene;\r\n","import React from \"react\";\nimport { Graph, DefaultLink } from \"@vx/network\";\n// import Graph from \"./vx_network/Graph\";\nimport brewNetworkInput from \"./vx_network/brewNetworkInput\";\n\nclass NetworkNode extends React.Component {\n    render() {\n        return <circle r={5} fill={\"#FFFFFF\"} />;\n    }\n}\n\nconst FlatGraphPlot = ({ graph, width, height }) => {\n    return (\n        <svg style={{ width: \"100%\", height: \"100%\" }}>\n            <Graph\n                graph={brewNetworkInput(graph, width, height)}\n                linkComponent={DefaultLink}\n                nodeComponent={NetworkNode}\n            />\n        </svg>\n    );\n};\n\nexport default FlatGraphPlot;\n","import React from \"react\";\nimport { scaleLinear } from \"@vx/scale\";\nimport \"../css/StructureSimilarityHeatMap.css\";\nimport HeatMapCircle from \"./HeatMapCircle\";\n\nconst leftHotLow = \"#77312f\";\nconst leftHotHigh = \"#f33d15\";\nconst rightHotLow = \"#2F773B\";\nconst rightHotHigh = \"#1CF315\";\n// const selectedColor = \"#FFFFFF\";\nexport const background = \"#28272c\";\n\nconst leftCircleColorScale = scaleLinear({\n    range: [leftHotLow, leftHotHigh],\n    domain: [0, 1.0],\n});\nconst rightCircleColorScale = scaleLinear({\n    range: [rightHotLow, rightHotHigh],\n    domain: [0, 1.0],\n});\nconst opacityScale = scaleLinear({\n    range: [0.5, 1.0],\n    domain: [0, 1.0],\n});\n\nfunction min(data, value) {\n    return Math.min(...data.map(value));\n}\n\nexport function generateBin(data) {\n    return data.reverse().map((row, row_idx) => {\n        return {\n            bin: row_idx,\n            bins: row.map((col, col_idx) => {\n                return { bin: col_idx, count: col };\n            }),\n        };\n    });\n}\n\nconst defaultMargin = { top: 10, left: 20, right: 20, bottom: 50 };\n\nconst StructureSimilarityHeatMap = ({\n    width,\n    height,\n    leftData = [[]],\n    rightData = [[]],\n    events = false,\n    margin = defaultMargin,\n    separation = 20,\n}) => {\n    const _width = parseInt(width);\n    const _height = parseInt(height);\n\n    const heatMapWidth = leftData.length;\n    const leftBins = generateBin(leftData);\n    const rightBins = generateBin(rightData);\n\n    // scales\n    const xScale = scaleLinear({\n        domain: [0, heatMapWidth],\n    });\n    const yScale = scaleLinear({\n        domain: [0, heatMapWidth],\n    });\n\n    // bounds\n    const size =\n        _width > margin.left + margin.right\n            ? _width - margin.left - margin.right - separation\n            : _width;\n    const xMax = size / 2;\n    const yMax = _height - margin.bottom - margin.top;\n\n    const binWidth = xMax / heatMapWidth;\n    const binHeight = yMax / heatMapWidth;\n    const radius = min([binWidth, binHeight], (d) => d) / 2;\n\n    xScale.range([0, xMax]);\n    yScale.range([yMax, 0]);\n\n    return _width < 380 ? null : (\n        <div className=\"heat-map-box\">\n            <svg width={_width} height={_height}>\n                <rect x={0} y={0} width={_width} height={_height} rx={14} fill={background} />\n                <HeatMapCircle\n                    margin_top={margin.top}\n                    margin_left={margin.left}\n                    data={leftBins}\n                    xScale={xScale}\n                    yScale={yScale}\n                    colorScale={leftCircleColorScale}\n                    opacityScale={opacityScale}\n                    radius={radius}\n                />\n                <HeatMapCircle\n                    margin_top={margin.top}\n                    margin_left={xMax + margin.left + separation}\n                    data={rightBins}\n                    xScale={xScale}\n                    yScale={yScale}\n                    colorScale={rightCircleColorScale}\n                    opacityScale={opacityScale}\n                    radius={radius}\n                />\n            </svg>\n            <div className=\"heat-map-title heat-map-left\">Structure Similarity</div>\n            <div className=\"heat-map-title heat-map-right\">Adjacency Matrix</div>\n        </div>\n    );\n};\n\nexport default StructureSimilarityHeatMap;\n","import React from \"react\";\nimport { Group } from \"@vx/group\";\nimport { BarGroup } from \"@vx/shape\";\nimport { AxisBottom } from \"@vx/axis\";\nimport { scaleBand, scaleLinear, scaleOrdinal } from \"@vx/scale\";\nimport ClassificationBarLegend from \"./ClassificationBarLegend\";\n\nconst blue = \"#aeeef8\";\nconst green = \"#e5fd3d\";\nconst purple = \"#9caff6\";\nconst barColor = [blue, green, purple];\nexport const background = \"#28272c\";\n\nconst defaultMargin = { top: 70, right: 20, bottom: 40, left: 0 };\nconst keys = [\"label\", \"y_hat\", \"y_logit\"];\nconst formatGraphClass = (graphClass) => \"0\" + graphClass;\n\n// accessors\nconst getGraphClass = (d) => d.graphClass;\n\n// scales\nconst yScale = scaleLinear({\n    domain: [0, 1.0],\n});\nconst x1Scale = scaleBand({\n    domain: keys,\n    padding: 0.1,\n});\nconst colorScale = scaleOrdinal({\n    domain: keys,\n    range: barColor,\n});\n\nfunction generateBarData(graph) {\n    return graph.y_hat.map((ele, idx) => {\n        return {\n            graphClass: idx,\n            label: graph.y === idx ? 1 : 0,\n            y_hat: ele,\n            y_logit: graph.y_logit[idx],\n        };\n    });\n}\n\nexport default function ClassificationBar({\n    width,\n    height,\n    graph,\n    events = false,\n    margin = defaultMargin,\n}) {\n    const _width = parseInt(width);\n    const _height = parseInt(height);\n\n    const data = generateBarData(graph);\n\n    const x0Scale = scaleBand({\n        domain: data.map(getGraphClass),\n        padding: 0.2,\n    });\n\n    const xMax = _width - margin.left - margin.right;\n    const yMax = _height - margin.top - margin.bottom;\n\n    // update scale output dimensions\n    x0Scale.rangeRound([0, xMax]);\n    x1Scale.rangeRound([0, x0Scale.bandwidth()]);\n    yScale.range([yMax, 0]);\n\n    return _width < 10 ? null : (\n        <React.Fragment>\n            <ClassificationBarLegend label={keys} color={barColor} />\n            <svg width={_width} height={_height}>\n                <rect x={0} y={0} width={_width} height={_height} fill={background} rx={14} />\n                <Group top={margin.top} left={margin.left}>\n                    <BarGroup\n                        data={data}\n                        keys={keys}\n                        height={yMax}\n                        x0={getGraphClass}\n                        x0Scale={x0Scale}\n                        x1Scale={x1Scale}\n                        yScale={yScale}\n                        color={colorScale}\n                    >\n                        {(barGroups) =>\n                            barGroups.map((barGroup) => (\n                                <Group\n                                    key={`bar-group-${barGroup.index}-${barGroup.x0}`}\n                                    left={barGroup.x0}\n                                >\n                                    {barGroup.bars.map((bar) => (\n                                        <rect\n                                            key={`bar-group-bar-${barGroup.index}-${bar.index}-${bar.value}-${bar.key}`}\n                                            x={bar.x}\n                                            y={bar.y}\n                                            width={bar.width}\n                                            height={bar.height}\n                                            fill={bar.color}\n                                            rx={4}\n                                            onClick={() => {\n                                                if (!events) return;\n                                                const { key, value } = bar;\n                                                alert(JSON.stringify({ key, value }));\n                                            }}\n                                        />\n                                    ))}\n                                </Group>\n                            ))\n                        }\n                    </BarGroup>\n                </Group>\n                <AxisBottom\n                    top={yMax + margin.top}\n                    tickFormat={formatGraphClass}\n                    scale={x0Scale}\n                    stroke={green}\n                    tickStroke={green}\n                    hideAxisLine\n                    tickLabelProps={() => ({\n                        fill: green,\n                        fontSize: 11,\n                        textAnchor: \"middle\",\n                    })}\n                />\n            </svg>\n        </React.Fragment>\n    );\n}\n","import React, { Component } from \"react\";\nimport GridLayout, { WidthProvider } from \"react-grid-layout\";\nimport \"../../node_modules/react-grid-layout/css/styles.css\";\nimport \"../../node_modules/react-resizable/css/styles.css\";\nimport \"../css/Grid.css\";\n\nimport GridWrapper from \"./GridWrapper\";\nimport Scene from \"./Scene\";\nimport FlatGraphPlot from \"./FlatGraphPlot\";\nimport StructureSimilarityHeatMap from \"./StructureSimilarityHeatMap\";\nimport ClassificationBar from \"./ClassificationBar\";\n\nconst AutoWidthGridLayout = WidthProvider(GridLayout);\n\nclass Grid extends Component {\n    constructor(props) {\n        super(props);\n\n        const fullWidth = window.innerWidth - 20;\n        const smallGridWidth = Math.floor(fullWidth / 3);\n        this.state = {\n            layout: [\n                { i: \"scene\", x: 0, y: 0, w: fullWidth, h: 8, static: true },\n                {\n                    i: \"graph\",\n                    x: 0,\n                    y: 8,\n                    w: smallGridWidth,\n                    h: 4,\n                    minW: 2,\n                    maxW: fullWidth,\n                    minH: 2,\n                    maxH: 6,\n                },\n                {\n                    i: \"heatmap\",\n                    x: 4,\n                    y: 8,\n                    w: smallGridWidth,\n                    h: 4,\n                    minW: 2,\n                    maxW: fullWidth,\n                    minH: 2,\n                    maxH: 6,\n                },\n                {\n                    i: \"bar\",\n                    x: 8,\n                    y: 8,\n                    w: smallGridWidth,\n                    h: 4,\n                    minW: 2,\n                    maxW: fullWidth,\n                    minH: 2,\n                    maxH: 6,\n                },\n                { i: \"anchor\", x: 0, y: 12, w: fullWidth, h: 0.01, static: true },\n            ],\n            // structSimilarityBin: generateBin(selectedGraph.struct_simialrity),\n            // adjacencyMatrixBin: generateBin(selectedGraph.adjacency_matrix),\n        };\n    }\n\n    // handleHeatMapHover = ({ target }) => {\n    //     const idx_text = target.attributes.value.nodeValue.toString();\n    //     const indice = idx_text.split(\"-\").map((ele) => parseInt(ele));\n\n    //     const { structSimilarityBin, adjacencyMatrixBin } = this.state;\n\n    //     structSimilarityBin[indice[0]][indice[1]].selected = true;\n    //     adjacencyMatrixBin[indice[0]][indice[1]].selected = true;\n    //     this.setState({ structSimilarityBin, adjacencyMatrixBin });\n    // };\n\n    render() {\n        const { graphKeys, selectedGraphKey, selectedGraph, onChangeGraphSelector } = this.props;\n        const { layout } = this.state;\n\n        return (\n            <React.Fragment>\n                <AutoWidthGridLayout\n                    className=\"layout\"\n                    layout={layout}\n                    cols={window.innerWidth - 20}\n                    rowHeight={90}\n                    compactType={\"horizontal\"}\n                    verticalCompact={true}\n                >\n                    <GridWrapper key=\"scene\">\n                        <Scene\n                            selectedGraphKey={selectedGraphKey}\n                            selectedGraph={selectedGraph}\n                            options={graphKeys}\n                            onChange={onChangeGraphSelector}\n                        />\n                    </GridWrapper>\n                    {/* <GridWrapper key=\"graph\">\n                        <FlatGraphPlot graph={selectedGraph} />\n                    </GridWrapper>\n                    <GridWrapper key=\"heatmap\">\n                        <StructureSimilarityHeatMap\n                            leftData={selectedGraph.struct_similarity}\n                            rightData={selectedGraph.adjacency_matrix}\n                        />\n                    </GridWrapper>\n                    <GridWrapper key=\"bar\">\n                        <ClassificationBar graph={selectedGraph} />\n                    </GridWrapper>\n                    <GridWrapper key=\"anchor\">\n                        <div className=\"grid-anchor\" />\n                    </GridWrapper> */}\n                </AutoWidthGridLayout>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport \"./css/App.css\";\nimport Grid from \"./component/Grid\";\nimport Graphs from \"./data/toxic_comment_details.json\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const defaultGraphKey = \"0\";\n        this.state = {\n            selectedGraphKey: defaultGraphKey,\n        };\n    }\n\n    onChangeGraphSelector = ({ currentTarget }) => {\n        const selectedGraphKey = currentTarget.value;\n        this.setState({\n            selectedGraphKey: selectedGraphKey,\n        });\n    };\n\n    render() {\n        const { selectedGraphKey } = this.state;\n        return (\n            <div className=\"App\">\n                <Grid\n                    graphKeys={Object.keys(Graphs)}\n                    selectedGraphKey={selectedGraphKey}\n                    selectedGraph={Graphs[selectedGraphKey]}\n                    onChangeGraphSelector={this.onChangeGraphSelector}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}